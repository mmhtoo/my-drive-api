generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id String @id @default(uuid())
  username String
  email String @unique
  password String
  imageUrl String? @map("profile_image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  hasVerified Boolean @default(false) @map("has_verified")
  
  ownedNodes Node[] @relation("AccountHasOwnedNodes")
  refreshTokens RefreshToken[] @relation("AccountHasRefreshTokens")

  myShares Share[] @relation("AccountHasShares")
  otherShares Share[] @relation("ShareAllowAccounts")

  @@map("accounts")
  @@index([id,email])
}

enum NodeType {
  FILE
  FOLDER
}

model Node {
  id String @id @default(uuid())
  name String 
  type NodeType
  parentId String? @map("parent_id")
  parent Node? @relation("NodeHasParent", fields: [parentId], references: [id], onDelete:  Cascade)
  childNodes Node[] @relation("NodeHasParent")
  size Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  isArchived Boolean @default(false) @map("is_archived")
  archivedAt DateTime? @map("archived_at")
  metadata String? @map("metadata")
  isHidden Boolean @default(false) @map("is_hidden")
  extension String? @map("extension")
  sourceTempLink String? @map("source_temp_link")
  sourceRefKey String? @map("source_ref_key")

  ownerAccountId String @map("owner_account_id")
  ownerAccount Account @relation("AccountHasOwnedNodes", fields: [ownerAccountId], references: [id])

  shares Share[] @relation("NodeHasShares")

  @@map("nodes")
  @@index([id, ownerAccountId, name])
}

model RefreshToken {
  id Int @id @default(autoincrement())
  token String @unique
  hasClaimed Boolean @default(false) @map("has_claimed") // status of token, has already used or not
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  accountId String @map("account_id")
  account Account @relation("AccountHasRefreshTokens", fields: [accountId], references: [id])

  @@map("refresh_tokens")
  @@index([id, accountId, token])
}

model Share {
  id String @id @default(uuid())
  nodeId String @map("node_id") 
  node Node @relation("NodeHasShares", fields: [nodeId], references: [id], onDelete: Cascade)
  ownerAccountId String @map("account_id")
  ownerAccount Account @relation("AccountHasShares", fields: [ownerAccountId], references: [id], onDelete: Cascade)

  allowAnyOne Boolean @default(false) @map("allow_anyone")
  allowedAccounts Account[] @relation("ShareAllowAccounts")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("shares")
}